'use strict';
var mocha = require('mocha'),
  coMocha = require('co-mocha'),
  expect = require('chai').expect,
  sinon = require('sinon'),
  _ = require('underscore'),
  mockApp = require('./support/app-fixture.js');

coMocha(mocha);

var svcSubscription = require('../svc-subscription.js')(mockApp);

beforeEach(function() {
  this.sinon = sinon.sandbox.create();
});

afterEach(function(){
  this.sinon.restore();
});

describe('@gilt-tech/node-client.svc-subscription module', function() {

  const moduleName = '@gilt-tech/node-client.svc-subscription';

  describe('unsubMailingList method', function() {
    it('should exist', function() {
      expect(svcSubscription.unsubMailingList).to.be.a('generatorfunction');
    });

    it('should return an error object if [userGuid, mailingList] are not passed', function* () {
      this.sinon.spy(mockApp.log, 'log');
      var resp = yield svcSubscription.unsubMailingList({});
      expect(resp).to.be.an('object');
      expect(resp.error).to.be.truthy;
      expect(resp.error.code).to.equal('SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS');
      expect(resp.error.desc).to.match(new RegExp(moduleName + ' Missing options: .+'));
    });

    it('should return an error if [userGuid] is not passed', function* () {
      this.sinon.spy(mockApp.log, 'log');
      var resp = yield svcSubscription.unsubMailingList({mailingList: 'cart_reminder'});
      expect(resp).to.be.an('object');
      expect(resp.error).to.be.truthy;
      expect(resp.error.code).to.equal('SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS');
      expect(resp.error.desc).to.match(new RegExp(moduleName + ' Missing options: .+'));
    });

    it('should return an error if [mailingList] is not passed', function* () {
      this.sinon.spy(mockApp.log, 'log');
      var resp = yield svcSubscription.unsubMailingList({userGuid: '37c14030-5364-4dd8-b84f-d9a2bf029498'});
      expect(resp).to.be.an('object');
      expect(resp.error).to.be.truthy;
      expect(resp.error.code).to.equal('SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS');
      expect(resp.error.desc).to.match(new RegExp(moduleName + ' Missing options: .+'));
    });

    it('should return no errors', function* () {
      this.sinon.spy(mockApp.log, 'info');
      var opts = {
        userGuid: '37c14030-5364-4dd8-b84f-d9a2bf029498',
        mailingList: 'cart_reminder'
      };
      var respObj = yield svcSubscription.unsubMailingList(opts.userGuid);
      expect(respObj).to.be.a('object');
      expect(respObj).to.not.be.empty;
      expect(respObj).to.not.be.undefined;
    });
  });
  describe('unsubAll method', function() {
    it('should exist', function() {
      expect(svcSubscription.unsubAll).to.be.a('generatorfunction');
    });

    it('should return an error if [userGuid] is not passed', function* () {
      this.sinon.spy(mockApp.log, 'log');
      var resp = yield svcSubscription.unsubAll({});
      expect(resp).to.be.an('object');
      expect(resp.error).to.be.truthy;
      expect(resp.error.code).to.equal('SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS');
      expect(resp.error.desc).to.match(new RegExp(moduleName + ' Missing options: .+'));
    });

    it('should return no errors', function* () {
      this.sinon.spy(mockApp.log, 'info');
      var userGuid = '37c14030-5364-4dd8-b84f-d9a2bf029498';

      var respObj = yield svcSubscription.unsubAll({});
      expect(respObj).to.be.a('object');
      expect(respObj).to.not.be.empty;
      expect(respObj).to.not.be.undefined;
    });
  });
  describe('subscribeMailingList method', function() {
    it('should exist', function() {
      expect(svcSubscription.subscribeMailingList).to.be.a('generatorfunction');
    });

    it('should return an error if [userGuid, mailingList] is not passed', function* () {
      this.sinon.spy(mockApp.log, 'log');
      var resp = yield svcSubscription.subscribeMailingList({});
      expect(resp).to.be.an('object');
      expect(resp.error).to.be.truthy;
      expect(resp.error.code).to.equal('SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS');
      expect(resp.error.desc).to.match(new RegExp(moduleName + ' Missing options: .+'));
    });

    it('should return an error if [userGuid] is not passed', function* () {
      this.sinon.spy(mockApp.log, 'log');
      var resp = yield svcSubscription.subscribeMailingList({mailingList: 'cart_reminder'});
      expect(resp).to.be.an('object');
      expect(resp.error).to.be.truthy;
      expect(resp.error.code).to.equal('SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS');
      expect(resp.error.desc).to.match(new RegExp(moduleName + ' Missing options: .+'));
    });

    it('should return an error if [mailingList] is not passed', function* () {
      this.sinon.spy(mockApp.log, 'log');
      var resp = yield svcSubscription.subscribeMailingList({userGuid: '37c14030-5364-4dd8-b84f-d9a2bf029498'});
      expect(resp).to.be.an('object');
      expect(resp.error).to.be.truthy;
      expect(resp.error.code).to.equal('SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS');
      expect(resp.error.desc).to.match(new RegExp(moduleName + ' Missing options: .+'));
    });

    it('should return no errors', function* () {
      this.sinon.spy(mockApp.log, 'info');
      var userGuid = '37c14030-5364-4dd8-b84f-d9a2bf029498';
      var mailingList = 'cart_reminder';

      var respObj = yield svcSubscription.subscribeMailingList({userGuid: userGuid});
      expect(respObj).to.be.a('object');
      expect(respObj).to.not.be.empty;
      expect(respObj).to.not.be.undefined;
    });
  });
});