'use strict';
/**
 * svc-subscription client for node framework
 *
 * @param {Object} app
 * @module @gilt-tech/node-client.svc-subscription
 * @return {{unsubMailingList: Function, unsubAll: Function, switchToWeekly: Function, cityUnsubAll: Function }}
 */
module.exports = function (app) {

  const SVC_SUBSCRIPTION_BASE_URI = 'http://svc-subscription.backoffice.giltaws.com/subscription/1.0';

  const ENDPOINTS = {
    unsubMailingList: SVC_SUBSCRIPTION_BASE_URI + '/unsubscribe/',
    unsubAll: SVC_SUBSCRIPTION_BASE_URI + '/unsubscribe_all/',
    subscribeMailingList: SVC_SUBSCRIPTION_BASE_URI + '/subscribe/'
  };
  const _ = require('underscore');
  const clientHelpers = require('@gilt-tech/util.client')(app);
  const req = app.utils.request;
  const moduleName = '@gilt-tech/node-client.svc-subscription';
  const emailTypes = ['daily_sales_reminder', 'weekly_sales_reminder', 'special_offer', 'sent_invite_updates', 'cart_reminder', 'wait_list_recommendations', 'home_announcements'];
  let warnMessage;

  /**
   *
   * @private
   * @param {Array} missingOptions
   * @throws {Error}
   * @returns {Object}
   */
  function getMissingOptionsErrorResponse (missingOptions) {
    if (!_.isArray(missingOptions)) {
      throw new Error('There are no missingOptions');
    }
    return clientHelpers.createErrorResponse(moduleName, 'SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS', moduleName + ' Missing options: ' + missingOptions.join(','));
  }

  return {
    /**
     * Unsub user from a specific mailing list
     *
     * @public
     * @method unsubMailingList
     * @param {Object} opts
     * @param {String} opts.userGuid    User guid to lookup
     * @param {String} opts.mailing_list    Mailing list (or email campaign) to unsub user to
     * @return {Object}
     */
    unsubMailingList: function* unsubMailingList(opts) {
      let userGuid = opts.userGuid;
      let mailingList = opts.mailingList;
      const url = ENDPOINTS.unsubMailingList + userGuid + '/mailing_list/' + mailingList;

      let response;
      let missingOptions;
      let qs;

      if ((missingOptions = clientHelpers.getMissingOptions(moduleName, ['userGuid', 'mailingList'], opts)).length > 0) {
        app.log.error('unsubMailingList: ' + missingOptions);
        return getMissingOptionsErrorResponse(missingOptions);
      }

      if (!emailTypes.includes(mailingList)) {
        warnMessage = 'Unsubscribe failed for user: [' + userGuid + '] - Check mailingList parameter [' + mailingList + ']' + '\n' + 'It should be equal to a value from the following list (check spelling/plural/singular): ' + '\n' + emailTypes + '\n' + '\n';
      } else {
        warnMessage = 'Unsubcribe to [' + mailingList + '] failed! Confirm userGuid [' + userGuid + ']' + '\n';
      }

      qs = clientHelpers.createQueryStringObject(moduleName, {});

      response = yield req(url, {
        qs: qs,
        method: 'put',
        cache: false,
        httpEnvelope: true
      });

      if (_.isEmpty(response)) {
        var errDesc = moduleName + ': svc-subscription did not respond: ' + url + ' - ' + JSON.stringify(qs);
        app.log.error(errDesc);
        return clientHelpers.createErrorResponse(moduleName, 'SVC_SUBSCRIPTION_UNAVAILABLE', errDesc);
      } else if (response.http.code === 200) {
        app.log.info('User [' + opts.userGuid + '] successfully unsubscribed from [' + opts.mailingList + ']');
        return clientHelpers.wrapSuccessResponse(response);
      } else {
        app.log.warn(warnMessage + JSON.stringify(response.result, null, 2));
        return clientHelpers.createErrorResponse(moduleName, 'ERROR_FETCHING_USER', JSON.stringify(response.result, null, 2), response);
      }
    },
        /**
     * Unsub user from all marketing emails
     *
     * @public
     * @method unsubAll
     * @param {Object} opts
     * @param {String} opts.userGuid    User guid to lookup
     * @return {Object}
     */
    unsubAll: function* unsubAll(opts) {
      let userGuid = opts.userGuid;
      const url = ENDPOINTS.unsubAll + userGuid;

      let response;
      let missingOptions;
      let qs;

      if ((missingOptions = clientHelpers.getMissingOptions(moduleName, ['userGuid'], opts)).length > 0) {
        app.log.error('unsubAll: ' + missingOptions);
        return getMissingOptionsErrorResponse(missingOptions);
      }

      warnMessage = 'Unsubscribe failed for user: [' + userGuid + '] - Check userGuid: [' + userGuid + '] is correct' + '\n';

      qs = clientHelpers.createQueryStringObject(moduleName, {});

      response = yield req(url, {
        qs: qs,
        method: 'put',
        cache: false,
        httpEnvelope: true
      });

      if (_.isEmpty(response)) {
        var errDesc = moduleName + ': svc-subscription did not respond: ' + url + ' - ' + JSON.stringify(qs);
        app.log.error(errDesc);
        return clientHelpers.createErrorResponse(moduleName, 'SVC_SUBSCRIPTION_UNAVAILABLE', errDesc);
      } else if (response.http.code === 200) {
        app.log.info('User [' + opts.userGuid + '] successfully unsubscribed from all marketing emails');
        return clientHelpers.wrapSuccessResponse(response);
      } else {
        app.log.warn(warnMessage + JSON.stringify(response, null, 2));
        return clientHelpers.createErrorResponse(moduleName, 'SVC_SUBSCRIPTION_CLIENT_MISSING_ARGUMENTS', response.result.error.errors[0].detail, response);
      }
    },
        /**
     * Subscribe user to a specific mailing list
     *
     * @public
     * @method subscribeMailingList
     * @param {Object} opts
     * @param {String} opts.userGuid    User guid to lookup
     * @param {String} opts.mailing_list    Mailing list (or email campaign) to subscribe user to
     * @return {Object}
     */
    subscribeMailingList: function* subscribeMailingList(opts) {
      let userGuid = opts.userGuid;
      let mailingList = opts.mailingList;
      const url = ENDPOINTS.subscribeMailingList + userGuid + '/mailing_list/' + mailingList;

      let response;
      let missingOptions;
      let qs;

      if ((missingOptions = clientHelpers.getMissingOptions(moduleName, ['userGuid', 'mailingList'], opts)).length > 0) {
        app.log.error('subscribeMailingList: ' + missingOptions);
        return getMissingOptionsErrorResponse(missingOptions);
      }

      qs = clientHelpers.createQueryStringObject(moduleName, {});

      response = yield req(url, {
        qs: qs,
        method: 'put',
        cache: false,
        httpEnvelope: true
      });

      if (emailTypes.indexOf(mailingList) < 0) {
        warnMessage = 'Subscribe failed for user: [' + userGuid + ']: Check mailingList parameter [' + mailingList + '] it should match an email from this list and be spelled correctly: ' + emailTypes;
      } else {
        warnMessage = 'Subcribe to [' + mailingList + '] failed! Confirm userGuid [' + userGuid + ']';
      }

      if (_.isEmpty(response)) {
        var errDesc = moduleName + ': svc-subscription did not respond: ' + url + ' - ' + JSON.stringify(qs);
        app.log.error(errDesc);
        return clientHelpers.createErrorResponse(moduleName, 'SVC_SUBSCRIPTION_UNAVAILABLE', errDesc);
      } else if (response.http.code === 200) {
        app.log.info('User [' + opts.userGuid + '] successfully subscribed to [' + opts.mailingList + ']' + '\n' + response);
        return clientHelpers.wrapSuccessResponse(response);
      } else {
        app.log.warn(warnMessage + JSON.stringify(response, null, 2));
        return clientHelpers.createErrorResponse(moduleName, 'ERROR_FETCHING_USER', response.http.message, response);
      }
    }
  };
};